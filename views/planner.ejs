<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Dashboard</title>
    <link rel="stylesheet" href="/css/planner.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link rel="stylesheet" href="/css/mark.css">
    <style>
        .task-form {
            margin-bottom: 10px;
            display: flex;
            gap: 8px;
        }

        .task-input {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            flex-grow: 1;
        }

        .task-submit {
            padding: 8px 16px;
            background-color: #5185d2;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .task-submit:hover {
            background-color: #4b69c4;
        }
        
        .task-indicator {
            width: 6px;
            height: 6px;
            background-color: #5185d2;
            border-radius: 50%;
            display: inline-block;
            margin-left: 4px;
        }

        .card {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .delete-btn {
            background: none;
            border: none;
            cursor: pointer;
            color: red;
            font-size: 16px;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }

        .day {
            padding: 10px;
            text-align: center;
            border: 1px solid #ddd;
            position: relative;
            cursor: pointer;
        }

        .empty {
            background-color: #f0f0f0;
        }

        .task-list {
            margin-top: 20px;
        }

        .task-list-item {
            padding: 8px;
            border: 1px solid #ddd;
            margin-bottom: 8px;
            background-color: #f9f9f9;
        }
    </style>
</head>

<body>

  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light fixed-top">
    <div class="container">
        <a class="navbar-brand">
            <img src="/assets/img/logo.png" alt="Logo" style="max-height: 70px; width: auto;">
        </a>
        <div class="navbar-title">
            <strong>SEYUEL</strong>
        </div>
        <a class="navbar-halo" href="/">
            <strong>
                <%= username ? `Halo, ${username}` : '' %>
            </strong>
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto d-flex align-items-center">
                <li class="nav-item"><a class="nav-link" href="/">Home</a></li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="" id="navbarDropdown" role="button"
                        data-bs-toggle="dropdown" aria-expanded="false" onclick="checkLogin(event)">
                        Wellness
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <li><a class="dropdown-item" href="/pencarian" onclick="checkLogin(event)">Calories</a></li>
                        <li><a class="dropdown-item" href="/kalkulator" onclick="checkLogin(event)">Nutrition
                                Calculator</a></li>
                        <li><a class="dropdown-item" href="/consul" onclick="checkLogin(event)">Consultancy</a></li>
                    </ul>
                </li>
                <li class="nav-item"><a class="nav-link" href="/planner" onclick="checkLogin(event)">Daily Planner</a>
                </li>
                <li class="nav-item"><a class="nav-link" href="/notes" onclick="checkLogin(event)">Notes</a></li>
                <li class="nav-item"><a class="nav-link" href="/mark" onclick="checkLogin(event)">Mark As Done</a></li>
                <% if (isAdmin) { %>
                    <li class="nav-item"><a class="nav-link" href="/admin">Admin Dashboard</a></li>
                    <% } %>
                        <li class="nav-item ms-3">
                            <% if (username) { %>
                                <button class="btn btn-danger" onclick="logout()">Logout</button>
                                <% } else { %>
                                    <a class="nav-link" href="/login">
                                        <button type="submit" class="btn btn-primary">Login</button>
                                    </a>
                                    <% } %>
                        </li>
            </ul>
        </div>
    </div>
</nav>

    <div class="main-container" style="margin-top: 70px;">

        <div class="sidebar">
            <div class="sidebar-item active" onclick="showDashboard()">Dashboard</div>
            <div class="sidebar-item" onclick="showCalendar()">Calendar</div>
        </div>
        <div class="content">
            <div class="header">
                <h1>Daily Planner</h1>
                <p>Plan Your Days Efficiently!</p>
            </div>
            <div class="board" id="dashboard-content">
                <div class="column" id="to-do-column">
                    <div class="column-header"><span class="column-title">To Do</span></div>
                    <form class="task-form" id="todo-form">
                        <input type="text" class="task-input" id="todo-input" placeholder="Enter new task..." required>
                        <input type="datetime-local" class="task-input" id="task-datetime" required>
                        <button type="submit" class="task-submit">Add Task</button>
                    </form>
                    <div id="to-do-cards" class="cards-container"></div>
                </div>
            </div>
            <div class="calendar-view" id="calendar-content" style="display: none;">
                <div class="calendar-header">
                    <button class="nav-button" onclick="changeMonth(-1)">&#60;</button>
                    <h3 id="calendar-month-year">January 2024</h3>
                    <button class="nav-button" onclick="changeMonth(1)">&#62;</button>
                </div>
                <div class="calendar-grid" id="calendar-grid"></div>
                <div class="task-list" id="task-list"></div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="bg-dark text-light py-4 border-top">
        <div class="container text-center">
            <div class="social-icons mb-3">
                <a href="https://www.whatsapp.com" target="_blank" class="mx-2"><i class="fab fa-whatsapp"></i></a>
                <a href="https://www.instagram.com" target="_blank" class="mx-2"><i class="fab fa-instagram"></i></a>
                <a href="https://www.youtube.com" target="_blank" class="mx-2"><i class="fab fa-youtube"></i></a>
            </div>
            <small>
                <a href="https://policies.google.com/privacy?hl=en-US" class="me-3">Privacy Policy</a> |
                <a href="https://www.termsandconditionsgenerator.com/" class="ms-3">Terms & Conditions</a>
            </small>
        </div>
    </footer>

    <script>
        function logout() {
            fetch('/logout', { method: 'POST' })
                .then(() => {
                    window.location.href = '/'; // Redirect ke halaman utama
                })
                .catch(err => {
                    console.error("Logout failed:", err);
                });
        }
    </script>

    <script>
        let currentDate = new Date();
        let taskData = [];  // Store all tasks for filtering by date

        // Load tasks from server
        function loadTasks() {
            fetch('http://localhost:3000/tasks')
                .then(response => response.json())
                .then(data => {
                    taskData = data;  // Store tasks in taskData
                    const todoContainer = document.getElementById('to-do-cards');
                    todoContainer.innerHTML = '';

                    data.forEach(task => {
                        const taskCard = document.createElement('div');
                        taskCard.classList.add('card');
                        taskCard.innerHTML = `
                            <div>
                                <div class="card-title">${task.task}</div>
                                <div class="card-datetime">${new Date(task.datetime).toLocaleString()}</div>
                            </div>
                            <button class="delete-btn" data-id="${task._id}">üóëÔ∏è</button>
                        `;
                        taskCard.querySelector('.delete-btn').addEventListener('click', function () {
                            deleteTask(task._id);
                        });
                        todoContainer.appendChild(taskCard);
                    });
                })
                .catch(error => console.error('Error loading tasks:', error));
        }

        // Add new task to server
        document.getElementById('todo-form').addEventListener('submit', function (e) {
            e.preventDefault();
            const input = document.getElementById('todo-input');
            const datetimeInput = document.getElementById('task-datetime');

            const taskData = {
                task: input.value.trim(),
                datetime: datetimeInput.value
            };

            fetch('http://localhost:3000/add-task', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(taskData)
            })
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    input.value = '';
                    datetimeInput.value = '';
                    loadTasks(); // Reload tasks after adding
                })
                .catch(error => console.error('Error adding task:', error));
        });

        // Delete task from server
        function deleteTask(id) {
            fetch(`http://localhost:3000/delete-task/${id}`, {
                method: 'DELETE'
            })
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    loadTasks(); // Reload tasks after deletion
                })
                .catch(error => console.error('Error deleting task:', error));
        }

        // Show dashboard view
        function showDashboard() {
            document.getElementById('dashboard-content').style.display = 'block';
            document.getElementById('calendar-content').style.display = 'none';
        }

        // Show calendar view
        function showCalendar() {
            document.getElementById('dashboard-content').style.display = 'none';
            document.getElementById('calendar-content').style.display = 'block';
            renderCalendar();
        }

        // Change month in the calendar
        function changeMonth(direction) {
            currentDate.setMonth(currentDate.getMonth() + direction);
            renderCalendar();
        }

        // Render calendar with task indicators
        function renderCalendar() {
            const month = currentDate.getMonth();
            const year = currentDate.getFullYear();
            const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            const firstDay = new Date(year, month, 1).getDay();
            const lastDate = new Date(year, month + 1, 0).getDate();
            const calendarGrid = document.getElementById('calendar-grid');
            const calendarMonthYear = document.getElementById('calendar-month-year');

            calendarMonthYear.textContent = `${monthNames[month]} ${year}`;
            calendarGrid.innerHTML = ''; // Clear existing grid

            // Empty cells for previous month
            for (let i = 0; i < firstDay; i++) {
                const emptyCell = document.createElement('div');
                emptyCell.classList.add('day', 'empty');
                calendarGrid.appendChild(emptyCell);
            }

            // Populate calendar with days
            const taskDates = {}; // Track task dates
            taskData.forEach(task => {
                const taskDate = task.datetime.split('T')[0]; // Get the date part
                if (!taskDates[taskDate]) {
                    taskDates[taskDate] = [];
                }
                taskDates[taskDate].push(task);
            });

            for (let day = 1; day <= lastDate; day++) {
                const dayCell = document.createElement('div');
                dayCell.classList.add('day');
                dayCell.textContent = day;
                const dayString = `${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;

                // Add task indicators
                if (taskDates[dayString]) {
                    const indicator = document.createElement('span');
                    indicator.classList.add('task-indicator');
                    dayCell.appendChild(indicator);
                }

                // Add click event to show tasks when a day is clicked
                dayCell.addEventListener('click', function () {
                    showTasksForDate(dayString);
                });

                calendarGrid.appendChild(dayCell);
            }
        }

        // Show tasks for the selected date
        function showTasksForDate(date) {
            const taskListContainer = document.getElementById('task-list');
            const tasksForDate = taskData.filter(task => task.datetime.startsWith(date));
            taskListContainer.innerHTML = ''; // Clear previous task list

            if (tasksForDate.length > 0) {
                tasksForDate.forEach(task => {
                    const taskItem = document.createElement('div');
                    taskItem.classList.add('task-list-item');
                    taskItem.innerHTML = `
                        <div class="task-title">${task.task}</div>
                        <div class="task-datetime">${new Date(task.datetime).toLocaleString()}</div>
                    `;
                    taskListContainer.appendChild(taskItem);
                });
            } else {
                taskListContainer.innerHTML = `<p>No tasks for this day.</p>`;
            }
        }

        // Initial load
        window.onload = function () {
            showDashboard();
            loadTasks();
        };
        
    </script>
</body>

</html>

